// Ne = 5000, which will be kept constant. Na and Nc will be chosen from a file. Burn-in for 10*Na generations. Then for 3Ne = 15,000 generations population size will be Na. Then for 1Ne = 5,000 generations, there will be exponential increase/ decrease to Nc.
//4-fold pi = 0.019
//real Ne = 1.6 x 10^6, mu = 3 x 10-9, rec = rec_rate * 0.5 * 10^-8, 2Nes = [0, -1, -10, -100, -10000], s = [0.0, -0.0001, -0.001, -0.01, -1]
//scaling factor = 320
//scaled Ne = 5000, scaled mu = 9.6e-07, rec = rec_rate * 1.6 x 10^-6
//This is a discrete DFE model with 4 bins
//Demographic changes will be exponential, read from a file.
//To run: slim demo_neutral_SingExon_msmc.slim -d d_seed=1 
initialize()
{
    setSeed(d_seed);
    
    // set the overall mutation rate
    initializeMutationRate(9.6*1e-7);
    
    // mutation types: 
    initializeMutationType("m1", 0.5, "f", 0.0); //neutral, s = 0
        
    
    // g1 genomic element type: uses m1 for all mutations
    initializeGenomicElementType("g1", m1, 1.0);
    
    //chromosome with a single functional element on one side
    initializeGenomicElement(g1, 0, 1999);
    
    // uniform recombination along the chromosome
    initializeRecombinationRate(rec_rate*1.6*1e-6);
}

// part 2 (burn-in for gen_burnin generations): create a population of N_anc individuals
1
{
    sim.addSubpop("p1", N_anc);
}
// part 3: equilibrium part    
gen_burnin: {                                                                   
    newSize = N_anc;            
    p1.setSubpopulationSize(asInteger(newSize));                                
}
// part 4: exponential size change for 5,000 generations: reaches size N_cur
gen_eqm: {
    newSize = round(g_factor^(sim.generation - gen_eqm) * N_anc);
    p1.setSubpopulationSize(asInteger(newSize));
}
//print genotypes of 100 individuals selected randomly without replacement:
gen_stop late()
{
    p1.outputMSSample(100, F, "*", "/scratch/pjohri1/demo_neutral_SingExon_msmc/simID/simID_geneID_repID.ms", F);
}
//print all fixed mutations
gen_stop late(){sim.outputFixedMutations("/scratch/pjohri1/demo_neutral_SingExon_msmc/simID/simID_geneID_repID.fixed", append=F);}
gen_stop { }
