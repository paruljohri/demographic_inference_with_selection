#General workflow for simulating human-like chromosomes using SliM and inferring demography using MSMC 
#Updated on December 7, 2020

#Step1: simulations in SliM
slim -d d_seed=${seed} -d d_f0=100 -d d_f1=0 -d d_f2=0 -d d_f3=0 -d "d_simID='0'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/recombination+mutation_script_${demographic_model}_${exon_density}_chr6.slim
slim -d d_seed=${seed} -d d_f0=25 -d d_f1=25 -d d_f2=25 -d d_f3=25 -d "d_simID='4'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/ecombination+mutation_script_${demographic_model}_${exon_density}_chr6.slim

#Possible inputs:
#${seed} = (any random seed of your choosing)
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${demographic_model} = (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${output_folder} = (folder that newly created .ms files will be output to)



#Step2: mask exonic regions:
python OtherScripts/mask_coding_regions_human.py ${path_to_chromosome} ${DFE} ${replicate_num} ${chromosome_num}

#Possible inputs:
#${DFE} = (0, 1, 2, 3, 4, 5, 6)
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)




#Step3: mask random regions:
python RecMutnRateMapScripts/python_script_mask_random_regions.py ${size} ${percentage_to_mask} output_genome${replicate_num}_chr${chromosome_num}_masked.ms output_genome${replicate_num}_chr${chromosome_num}_masked_random_regions.ms RecMutnRateMapScripts/${exon_density}_positions.txt RecMutnRateMapScripts/raw_repeat_lengths.txt

#Possible inputs:
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${percentage_to_mask} = (Percentage of genome to be masked as a decimal from 0 to 1. For example, write in '0.25' if you desire 25% of the genome to be masked. For the purposes of this study, 10% masking, corresponding to '0.1', was used.)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${size} = (The size of each chromosome in the genome in base pairs, which will vary depending on the functional density of the chromosome and whether or not its exons are masked. Below are the possible sizes.)
#Possible sizes
#genome05 = 150018600
#genome10 = 150029950
#genome20 = 150003700



#Step4: mask centromere region:
python RecMutnRateMapScripts/python_script_mask_centromere.py ${size} output_genome${replicate_num}_chr${chromosome_num}_masked.ms output_genome${replicate_num}_chr${chromosome_num}_masked_centromere.ms 

#Possible inputs:
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${size} = (The size of each chromosome in the genome in base pairs, which will vary depending on the functional density of the chromosome and whether or not its exons are masked. Below are the possible sizes.)
#Possible sizes
#genome05 = 150018600
#genome10 = 150029950
#genome20 = 150003700



#Step5: mask random regions and centromere region:
python RecMutnRateMapScripts/python_script_mask_centromere.py ${size} output_genome${replicate_num}_chr${chromosome_num}_masked_random_regions.ms output_genome${replicate_num}_chr${chromosome_num}_masked_centromere+random_regions.ms 

#Possible inputs:
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${size} = (The size of each chromosome in the genome in base pairs, which will vary depending on the functional density of the chromosome and whether or not its exons are masked. Below are the possible sizes.)
#Possible sizes
#genome05 = 150018600
#genome10 = 150029950
#genome20 = 150003700


#Step6: Randomly sample N haplotypes from the 100 haplotypes present in an .ms file
python OtherScripts/subsample_ms.py output_genome${replicate_num}_chr${chromosome_num}_${masking_state}.ms sampled_150Mb_2indv_genome${replicate_num}_chr${chromosome_num}_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}.ms 2

#Possible inputs:
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${DFE} = (0, 4)
#${demographic_model} = (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${masking_state} = (masked, masked_random_regions, masked_centromere, masked_centromere+random_regions)



#Step7: make the input file (.tab format) for MSMC
less sampled_150Mb_2indv_genome${replicate_num}_chr${chromosome_num}_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}.ms |python ms2multihetsep.py "sampled_150Mb_2indv_genome${replicate_num}_chr${chromosome_num}_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}" $size > converted_150Mb_2indv_genome${replicate_num}_chr${chromosome_num}_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}.tab

#ms2multihetsep.py was provided in the MSMC Tools folder (XXXXXXXXXlinkXXXXXXXXXXX)

#Possible inputs:
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${DFE} = (0, 4)
#${demographic_model} = (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${masking_state} = (masked, masked_random_regions, masked_centromere, masked_centromere+random_regions)
#$size = (The size of each chromosome in the genome in base pairs, which will vary depending on the exon density of the chromosome. Below are the possible sizes.)
#Possible sizes
#genome05 = 150018600
#genome10 = 150029950
#genome20 = 150003700



#Step8: run MSMC
msmc_1.1.0_linux64bit -r 1.0 -t 1 -o raw_output_150Mb_2indv_genome${replicate_num}_${demographic_model}_sim${DFE}_${exon_density}_${masking_state} ${input_filenames}

where ${input_filenames} = converted_150Mb_2indv_genome${replicate_num}_chr1_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}.tab converted_150Mb_2indv_genome${replicate_num}_chr2_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}.tab ... converted_150Mb_2indv_genome${replicate_num}_chr21_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}.tab converted_150Mb_2indv_genome${replicate_num}_chr22_${demographic_model}_sim${DFE}_${exon_density}_${masking_state}.tab for all 22 chromosomes in the genome

#Possible inputs:
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${DFE} = (0, 4)
#${demographic_model} = (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${masking_state} = (masked, masked_random_regions, masked_centromere, masked_centromere+random_regions)



#Step9: make SFS for all SNPs
>> python OtherScripts/get_sfs_for_fsc_chr22.py -inputFolder /path/to/ms/files -outputFolder path/to/SFS/files -demography ${demographic_model} -genome genome20 -dfe ${DFE} -repNum ${replicate_num} -masking ${masking_state} -num_indv 100

#Possible inputs:
#${DFE} = (0, 4)
#${demographic_model} - (eqm, growth, decline)
#${masking_state} = (masked, masked_random_regions, masked_centromere, masked_centromere+random_regions)
#${replicate_num} = (1, 2, 3)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${size} = (The size of each chromosome in the genome in base pairs, which will vary depending on the functional density of the chromosome and the type of masking that was applied. Below are the possible sizes.)

#Below are the base sizes for each exon density with just exon masking performed. In additon, one must subtract an additional size from these values depending on the masking size:
#genome05 = 142354366
#genome10 = 135572119
#genome20 = 118424753
#If random masking was applied, subtract 15,000,000. If centromere masking was applied, subtract 4,000,000. If both random masking and centromere masking were applied, subtract 19,000,000.



#Step10: run fastsimcoal2
fsc26 -t Fastsimcoal2_Inputfiles/${tested_model}.tpl -n 150000 -d -e Fastsimcoal2_Inputfiles/${tested_model}.est -M -L 50 -q -T
#uses the SFS file Fastsimcoal2_Inputfiles_SFS/MASTER_thinned_5kb_recombination+mutation_${demographic_model}_${masking_state}_${exon_density}_sim${DFE}_rep${replicate_num}_DAFpop0.obs

#Possible inputs:
#${DFE} = (0, 4)
#${tested_model} = (eqm, size_change_exponential, size_change_inst, inst_bot)
#${demographic_model} - (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${masking_state} = (masked, masked_random_regions, masked_centromere, masked_centromere+random_regions)
#${replicate_num} = (1, 2, 3)



#Step11: transform MSMC output files, average them and plot them
Use the "plot_msmc_and_fsc_results_human_genome_variable_rec_and_mut.py" script.  The scenario parameters, including the demographic model, exon density, DFE shape, SNP density, masking state, replicate number, and trial number, can be configured in the script itself. 
