#General workflow for simulating human-like chromosomes using SliM and inferring demography using fastsimcoal2 
#Updated on December 7, 2020

#Step1: simulations in SliM
slim -d d_seed=${seed} -d d_f0=100 -d d_f1=0 -d d_f2=0 -d d_f3=0 -d "d_simID='0'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/${demographic_model}_dfe_150Mb_22chr_scaled_${exon_density}.slim
slim -d d_seed=${seed} -d d_f0=10 -d d_f1=70 -d d_f2=10 -d d_f3=10 -d "d_simID='1'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/${demographic_model}_dfe_150Mb_22chr_scaled_${exon_density}.slim
slim -d d_seed=${seed} -d d_f0=10 -d d_f1=10 -d d_f2=70 -d d_f3=10 -d "d_simID='2'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/${demographic_model}_dfe_150Mb_22chr_scaled_${exon_density}.slim
slim -d d_seed=${seed} -d d_f0=10 -d d_f1=10 -d d_f2=10 -d d_f3=70 -d "d_simID='3'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/${demographic_model}_dfe_150Mb_22chr_scaled_${exon_density}.slim
slim -d d_seed=${seed} -d d_f0=25 -d d_f1=25 -d d_f2=25 -d d_f3=25 -d "d_simID='4'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/${demographic_model}_dfe_150Mb_22chr_scaled_${exon_density}.slim
slim -d d_seed=${seed} -d d_f0=50 -d d_f1=0 -d d_f2=0 -d d_f3=50 -d "d_simID='5'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/${demographic_model}_dfe_150Mb_22chr_scaled_${exon_density}.slim
slim -d d_seed=${seed} -d d_f0=70 -d d_f1=0 -d d_f2=0 -d d_f3=30 -d "d_simID='6'" -d "d_repID='${replicate_num}'" -d "d_chrNum='${chromosome_num}'" -d "d_folder='${output_folder}'" SlimScripts/${demographic_model}_dfe_150Mb_22chr_scaled_${exon_density}.slim

#Possible inputs:
#${seed} = (any random seed of your choosing) = ${replicate_num} + ${chromosome_num}
#${replicate_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${demographic_model} - (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${output_folder} = (folder that newly created .ms files will be output to)




#Step2: mask exonic regions:
python OtherScripts/mask_coding_regions_human.py ${path_to_chromosome} ${DFE} ${replicate_num} ${chromosome_num}

#Possible inputs:
#${DFE} = (0, 1, 2, 3, 4, 5, 6)
#${replicate_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)



#Step3: make SFS for varying SNP densities
python OtherScripts/SFS_maker_human_genome_all_SNPs.py ${input_filenames} ${size} ratio_file_${demographic_model}_${masking_state}_${exon_density}_sim${DFE}_rep${replicate_num}.txt MASTER_all_${demographic_model}_${masking_state}_${exon_density}_sim${DFE}_rep${replicate_num}_DAFpop0.obs
python OtherScripts/SFS_maker_human_genome_thinned_SNPs.py ${input_filenames} ${size} ratio_file_${demographic_model}_${masking_state}_${exon_density}_sim${DFE}_rep${replicate_num}.txt MASTER_thinned_${thinning_size_as_str}_${demographic_model}_${masking_state}_${exon_density}_sim${DFE}_rep${replicate_num}_DAFpop0.obs ${thinning_size_as_int}

where ${input_filenames} = "output_genome1_chr1_${masking_state} output_genome1_chr2_${masking_state} ... output_genome1_chr21_${masking_state} output_genome1_chr22_${masking_state}" for all 22 chromosomes in the genome

#Possible inputs:
#${DFE} = (0, 1, 2, 3, 4, 5, 6)
#${demographic_model} - (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${masking_state} = (unmasked, masked)
#${thinning_size_as_str} = (the desired distance between counted SNPs as a string, which for this project where 5kb, 50kb, and 100kb)
#${thinning_size_as_int} = (the desired distance between counted SNPs in base pairs, so for a thinning of 5kb, type 5000)
#${replicate_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#${chromosome_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
#${size} = (The size of each chromosome in the genome in base pairs, which will vary depending on the functional density of the chromosome and whether or not its exons are masked. Below are the possible sizes.)

#Possible sizes
#When exons are not masked:
#genome05 = 150018600
#genome10 = 150029950
#genome20 = 150003700
#When exons are masked:
#genome05 = 142354366
#genome10 = 135572119
#genome20 = 118424753



#Step4: run fastsimcoal2
fsc26 -t Fastsimcoal2_Inputfiles/${tested_model}.tpl -n 150000 -d -e Fastsimcoal2_Inputfiles/${tested_model}.est -M -L 50 -q -T
#uses the SFS file Fastsimcoal2_Inputfiles_SFS/MASTER_${SNP_density}_${demographic_model}_${masking_state}_${exon_density}_sim${DFE}_rep${replicate_num}_DAFpop0.obs

#Possible inputs:
#${DFE} = (0, 1, 2, 3, 4, 5, 6)
#${tested_model} = (eqm, size_change_exponential, size_change_inst, inst_bot)
#${SNP_density} = (all, thinned_5kb)
#${demographic_model} - (eqm, growth, decline)
#${exon_density} = (genome05, genome10, genome20) #where genomeX represents a genome that is X% exonic
#${masking_state} = (unmasked, masked)
#${replicate_num} = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)


#Step5: plot results
Use the "plot_msmc_and_fsc_results.py" script.  The scenario parameters, including the demographic model, exon density, DFE shape, SNP density, masking state, replicate number, and trial number, can be configured in the script itself. 
