//To run:
//slim -d d_seed=seed -d d_f0=f0 -d d_f1=f1 -d d_f2=f2 -d d_f3=f3 -d "d_simID='simNum'" -d "d_repID='genome number'" -d "d_chrNum='chromosome number'" -d "d_folder='/scratch/kriall/eqm_dfe_150Mb_22chr_genome05'" eqm_dfe_150Mb_22chr_scaled_genome05.slim

initialize() 
{
    setSeed(d_seed);
    intergenic_len = 15750;
    intron_len = 1500;
    exon_len = 350;
    num_genes = 5164;
    num_exons = 8;
    num_introns = 7;
    gene_block_len = intergenic_len + exon_len*num_exons + intron_len*num_introns;
    exon_block_len = exon_len + intron_len;
    total_size = 150029950;

    scaling_factor = 10;
    mutation_lines = readFile("/home/kriall/msmc_kellen/scripts/slim_related/chr6_mutation_map_genome10.txt");
    mutation_rates = NULL;
    mutation_ends = NULL;

    for (line in mutation_lines)
    {
    components = strsplit(line, "\t");
    mutation_ends = c(mutation_ends, asInteger(components[0]));
    mutation_rates = c(mutation_rates, asFloat(components[1]));
    }

    mutation_ends = c(mutation_ends[1:(size(mutation_ends)-1)] - 2, total_size);
    mutation_rates = mutation_rates * 0.25 * scaling_factor;
    initializeMutationRate(mutation_rates, mutation_ends);



    recombination_lines = readFile("/home/kriall/msmc_kellen/scripts/slim_related/chr6_recombination_map_genome10.txt");
    recombination_rates = NULL;
    recombination_ends = NULL;

    for (line in recombination_lines)
    {
    components = strsplit(line, "\t");
    recombination_ends = c(recombination_ends, asInteger(components[0]));
    recombination_rates = c(recombination_rates, asFloat(components[1]));
    }

    recombination_ends = c(recombination_ends[1:(size(recombination_ends)-1)] - 2, total_size);
    recombination_rates = recombination_rates * 1e-7;
    initializeRecombinationRate(recombination_rates, recombination_ends);

    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeMutationType("m2", 0.5, "s", "return runif(1, -8.13e-3, -8.13e-4);");
    initializeMutationType("m3", 0.5, "s", "return runif(1, -8.13e-2, -8.13e-3);");
    initializeMutationType("m4", 0.5, "s", "return runif(1, -1.0, -8.13e-2);");
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElementType("g2", m1, 1.0);
    initializeGenomicElementType("g3", c(m1, m2, m3, m4), c(d_f0, d_f1, d_f2, d_f3));

    // gene structure: integrenic-exon-intron-exon-intron-exon-intron-exon-intron-exon-intron-exon-intron-exon-intron-exon
    for (index_a in 0:(num_genes-1))
        {
        initializeGenomicElement(g1, (index_a*gene_block_len), (index_a*gene_block_len + intergenic_len-1)); //intergenic
        for (index_b in 0:(num_introns-1))
            {
            initializeGenomicElement(g3, ((index_a*gene_block_len) + intergenic_len + (index_b*exon_block_len)), (index_a*gene_block_len + intergenic_len + index_b*exon_block_len + exon_len - 1));//exon
            initializeGenomicElement(g2, (index_a*gene_block_len + intergenic_len + index_b*exon_block_len + exon_len), (index_a*gene_block_len + intergenic_len + index_b*exon_block_len + exon_len + intron_len-1));//intron
            }
        initializeGenomicElement(g3, (index_a*gene_block_len + intergenic_len + (index_b+1)*exon_block_len), (index_a*gene_block_len + intergenic_len + (index_b+1)*exon_block_len + exon_len - 1));//closing with exon
        }
    initializeGenomicElement(g1, gene_block_len*num_genes, gene_block_len*num_genes + intergenic_len - 1);//extra intergenic towards the end
}

1 
{
    sim.addSubpop("p1", 1000);
}

10000 late()
{
    p1.outputMSSample(100, F, "*", d_folder + "/sim" + d_simID + "/output_genome" + d_repID + "_chr" + d_chrNum + ".ms", F);
    print(p1.individualCount);
}
